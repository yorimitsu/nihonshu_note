import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

/** Autogenerated input type of CreateReview */
export type CreateReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  params: ReviewAttributes;
};

/** Autogenerated return type of CreateReview. */
export type CreateReviewPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  review: Review;
};

export type Mutation = {
  createReview?: Maybe<CreateReviewPayload>;
};


export type MutationCreateReviewArgs = {
  input: CreateReviewInput;
};

export type Query = {
  sake: Sake;
  sakes: Array<Sake>;
};


export type QuerySakeArgs = {
  id: Scalars['ID']['input'];
};

export type Review = {
  comment?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  rating: Scalars['Int']['output'];
  sake: Sake;
};

export type ReviewAttributes = {
  comment: Scalars['String']['input'];
  rating: Scalars['Int']['input'];
  sakeId: Scalars['ID']['input'];
};

export type Sake = {
  acidity?: Maybe<Scalars['String']['output']>;
  alcoholContent?: Maybe<Scalars['String']['output']>;
  brand?: Maybe<Scalars['String']['output']>;
  brewery?: Maybe<Scalars['String']['output']>;
  classification?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  flavorProfile?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  mainRice?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  reviews?: Maybe<Array<Review>>;
  ricePolishingRatio?: Maybe<Scalars['String']['output']>;
  sakeMeterValue?: Maybe<Scalars['String']['output']>;
};

export type CreateReviewMutationVariables = Exact<{
  params: ReviewAttributes;
}>;


export type CreateReviewMutation = { createReview?: { review: { id: string, comment?: string | null, rating: number, sake: { id: string } } } | null };

export type SakeQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SakeQuery = { sake: { id: string, name?: string | null, brand?: string | null, brewery?: string | null, classification?: string | null, mainRice?: string | null, ricePolishingRatio?: string | null, alcoholContent?: string | null, acidity?: string | null, sakeMeterValue?: string | null, flavorProfile?: string | null, description?: string | null } };

export type SakesQueryVariables = Exact<{ [key: string]: never; }>;


export type SakesQuery = { sakes: Array<{ id: string, name?: string | null, brand?: string | null, brewery?: string | null, classification?: string | null, mainRice?: string | null, ricePolishingRatio?: string | null, alcoholContent?: string | null, acidity?: string | null, sakeMeterValue?: string | null, flavorProfile?: string | null, description?: string | null, reviews?: Array<{ id: string, comment?: string | null, rating: number, sake: { id: string } }> | null }> };


export const CreateReviewDocument = gql`
    mutation createReview($params: ReviewAttributes!) {
  createReview(input: {params: $params}) {
    review {
      id
      comment
      rating
      sake {
        id
      }
    }
  }
}
    `;
export type CreateReviewMutationFn = Apollo.MutationFunction<CreateReviewMutation, CreateReviewMutationVariables>;

/**
 * __useCreateReviewMutation__
 *
 * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({
 *   variables: {
 *      params: // value for 'params'
 *   },
 * });
 */
export function useCreateReviewMutation(baseOptions?: Apollo.MutationHookOptions<CreateReviewMutation, CreateReviewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateReviewMutation, CreateReviewMutationVariables>(CreateReviewDocument, options);
      }
export type CreateReviewMutationHookResult = ReturnType<typeof useCreateReviewMutation>;
export type CreateReviewMutationResult = Apollo.MutationResult<CreateReviewMutation>;
export type CreateReviewMutationOptions = Apollo.BaseMutationOptions<CreateReviewMutation, CreateReviewMutationVariables>;
export const SakeDocument = gql`
    query sake($id: ID!) {
  sake(id: $id) {
    id
    name
    brand
    brewery
    classification
    mainRice
    ricePolishingRatio
    alcoholContent
    acidity
    sakeMeterValue
    flavorProfile
    description
  }
}
    `;

/**
 * __useSakeQuery__
 *
 * To run a query within a React component, call `useSakeQuery` and pass it any options that fit your needs.
 * When your component renders, `useSakeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSakeQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSakeQuery(baseOptions: Apollo.QueryHookOptions<SakeQuery, SakeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SakeQuery, SakeQueryVariables>(SakeDocument, options);
      }
export function useSakeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SakeQuery, SakeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SakeQuery, SakeQueryVariables>(SakeDocument, options);
        }
export type SakeQueryHookResult = ReturnType<typeof useSakeQuery>;
export type SakeLazyQueryHookResult = ReturnType<typeof useSakeLazyQuery>;
export type SakeQueryResult = Apollo.QueryResult<SakeQuery, SakeQueryVariables>;
export const SakesDocument = gql`
    query sakes {
  sakes {
    id
    name
    brand
    brewery
    classification
    mainRice
    ricePolishingRatio
    alcoholContent
    acidity
    sakeMeterValue
    flavorProfile
    description
    reviews {
      id
      comment
      rating
      sake {
        id
      }
    }
  }
}
    `;

/**
 * __useSakesQuery__
 *
 * To run a query within a React component, call `useSakesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSakesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSakesQuery({
 *   variables: {
 *   },
 * });
 */
export function useSakesQuery(baseOptions?: Apollo.QueryHookOptions<SakesQuery, SakesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SakesQuery, SakesQueryVariables>(SakesDocument, options);
      }
export function useSakesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SakesQuery, SakesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SakesQuery, SakesQueryVariables>(SakesDocument, options);
        }
export type SakesQueryHookResult = ReturnType<typeof useSakesQuery>;
export type SakesLazyQueryHookResult = ReturnType<typeof useSakesLazyQuery>;
export type SakesQueryResult = Apollo.QueryResult<SakesQuery, SakesQueryVariables>;